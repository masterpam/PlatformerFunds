#pragma once
#ifndef _STATES_H_
#define _STATES_H_
#define NUMPLATFORMS 5

#include <SDL.h>
#include "Button.h"
#include "PlatformPlayer.h"

class State // This is the abstract base class for all specific states.
{
protected:
	State() {}
public:
	virtual void Update() = 0; // Having at least one 'pure virtual' method like this, makes a class abtract.
	virtual void Render();     // Meaning we cannot create objects of the class.
	virtual void Enter() = 0;  // Virtual keyword means we can override in derived class.
	virtual void Exit() = 0;
	virtual void Resume();
};

class GameState : public State


{
private:
	int spawnFrames, spawnFramesMax; 
	PlatformPlayer* m_pPlayer;
	SDL_FRect* m_pPlatforms[NUMPLATFORMS]
	std::vector<Sprite*> m_vbackground
	bgScrollspeed = 2
	mgScrollspeed = 4
	fgScrollspeed = 8
	highestX = 0
    iReposition = 20 
	std::vector<Sprite*> m_vbackground
	std::vector<Sprite*> m_vMidground
	std::vector<Sprite*> m_vForeground


public:
	GameState();
	void Update();
	void CheckCollision();
	void Render();
	void Enter();
	void Exit();
	void Resume();
	void ScrollObjects(); 
	void SpawnObjects(); 
	
};

class TitleState : public State
{
public:
	TitleState();
	void Update();
	void Render();
	void Enter();
	void Exit();
private:
	Button* m_playBtn;
};

class PauseState : public State
{
public:
	PauseState();
	void Update();
	void Render();
	void Enter();
	void Exit();
private:
	Button* m_pauseBtn;
}; 

class ExitState : public State
{
public:
	ExitState();
	void Update();
	void Render();
	void Enter();
	void Exit();
private:
	Button* m_quitBtn;
};



#endif
